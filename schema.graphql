type Vault @entity {
  id: ID!

  pricePerFullShare: BigInt!

  totalSupply: BigInt!

  "Balance of the Vault contract in <Token> + balance of the Strategy contract in <Token>"
  vaultBalance: BigInt!

  "Balance specifically held in the strategy"
  strategyBalance: BigInt!

  "How much the vault allows to be borrowed"
  available: BigInt!

  token: Token!

  symbol: String!

  name: String!

  currentController: Controller!

  currentStrategy: Strategy!

  "Timestamp of the latest data update"
  timestamp: BigInt!

  "Block number of the latest data update"
  blockNumber: BigInt!

  "totalDeposited - totalWithdrawn"
  netDeposits: BigInt!

  totalDeposited: BigInt!

  totalWithdrawn: BigInt!

  "totalSharesMinted - totalSharesBurned"
  totalActiveShares: BigInt!

  totalSharesMinted: BigInt!

  totalSharesBurned: BigInt!

  events: [VaultEvent!]! @derivedFrom(field: "vault")

  transferEvents: [Transfer!]! @derivedFrom(field: "vault")

  depositEvents: [DepositEvent!]! @derivedFrom(field: "vault")

  withdrawEvents: [WithdrawEvent!]! @derivedFrom(field: "vault")

  balances: [AccountVaultBalance!]! @derivedFrom(field: "vault")

  strategies: [Strategy!]! @derivedFrom(field: "vault")

  controllers: [Controller!]! @derivedFrom(field: "vault")

}

type Account @entity {
  "Ethereum address of the user"
  id: ID!

  vaultBalances: [AccountVaultBalance!]! @derivedFrom(field: "account")

  "Vault events <Withdraw - Deposit> that are related to this account"
  vaultEvents: [VaultEvent!]! @derivedFrom(field: "account")

  "Vault events <Transfer> that are sent to this account"
  receivedTransferEvents: [Transfer!]! @derivedFrom(field: "to")

  "Vault events <Transfer> that are sent from this account"
  sentTransferEvents: [Transfer!]! @derivedFrom(field: "from")
}

type AccountVaultBalance @entity {
  id: ID!

  vault: Vault!

  account: Account!

  token: Token!

  balance: BigInt!

  totalDeposited: BigInt!

  totalWithdrawn: BigInt!

  totalSent: BigInt!

  totalReceived: BigInt!

  shareBalance: BigInt!

  totalSharesMinted: BigInt!

  totalSharesBurned: BigInt!

  totalSharesSent: BigInt!

  totalSharesReceived: BigInt!
}

type Token @entity {
  id: ID!

  address: Bytes!

  decimals: Int!

  name: String!

  symbol: String!
}

type Transfer @entity {
  id: ID!

  from: Account!

  to: Account!

  value: BigInt!

  amount: BigInt!

  vault: Vault!

  pricePerFullShare: BigInt!

  balance: BigInt!

  totalSupply: BigInt!

  available: BigInt!

  timestamp: BigInt!

  blockNumber: BigInt!

  transactionHash: Bytes!
}

interface VaultEvent {
  id: ID!

  vault: Vault!

  account: Account!

  amount: BigInt!

  shares: BigInt!

  timestamp: BigInt!

  blockNumber: BigInt!

  transactionHash: Bytes!

  pricePerFullShare: BigInt!
}

type DepositEvent implements VaultEvent @entity {
  id: ID!

  vault: Vault!

  account: Account!

  amount: BigInt!

  shares: BigInt!

  timestamp: BigInt!

  blockNumber: BigInt!

  transactionHash: Bytes!

  pricePerFullShare: BigInt!
}

type WithdrawEvent implements VaultEvent @entity {
  id: ID!

  vault: Vault!

  account: Account!

  amount: BigInt!

  shares: BigInt!

  timestamp: BigInt!

  blockNumber: BigInt!

  transactionHash: Bytes!

  pricePerFullShare: BigInt!
}

type Strategy @entity {
  "Ethereum address"
  id: ID!

  vault: Vault!
}

type Controller @entity {
  "Ethereum address"
  id: ID!

  vault: Vault!
}
